{"version":3,"file":"js/470.c7d94c59.js","mappings":"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","sources":["webpack://guiness-front/./src/Views/PostView.vue?9ad5","webpack://guiness-front/./src/components/PostItem.vue?12bf","webpack://guiness-front/./src/api/comment.js","webpack://guiness-front/./src/api/report.js","webpack://guiness-front/src/components/PostItem.vue","webpack://guiness-front/./src/components/PostItem.vue?817c","webpack://guiness-front/./src/components/PostItem.vue","webpack://guiness-front/src/Views/PostView.vue","webpack://guiness-front/./src/Views/PostView.vue?80a6","webpack://guiness-front/./src/Views/PostView.vue","webpack://guiness-front/./src/api/follow.js","webpack://guiness-front/./src/api/like.js","webpack://guiness-front/./src/api/posts.js"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"post-view\"},[_c('PostItem')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"post-card__wrapper\"},[_c('div',{staticClass:\"post-card\"},[_c('div',{staticClass:\"post-card__img\"},[_c('img',{staticStyle:{\"width\":\"100%\"},attrs:{\"src\":_vm.img,\"alt\":\"\"}})]),_c('div',[_c('div',{staticClass:\"post-card__follow\"},[_c('div',[_c('span',[_vm._v(_vm._s(_vm.postData.writerID))]),(this.$store.state.userID != this.postData.writerID)?_c('button',{staticClass:\"btn-like\",attrs:{\"type\":\"button\"},on:{\"click\":_vm.followUser}},[_vm._v(\" 팔로우 \"),_c('i',{class:['fa-heart', _vm.follow ? 'fas' : 'far']})]):_vm._e(),(this.$store.state.userID == this.postData.writerID)?_c('div',[_c('span',{staticClass:\"myPost\"},[_vm._v(\" [내가 쓴 글] \")])]):_vm._e()]),(this.$store.state.userID == this.postData.writerID)?_c('div',{staticClass:\"post-card__btns\"},[_c('button',{staticClass:\"btn__edit\",on:{\"click\":_vm.editPost}},[_vm._v(\"수정\")]),_c('button',{staticClass:\"btn__delete\",on:{\"click\":_vm.deletePost}},[_vm._v(\"삭제\")])]):_vm._e()]),_c('div',{staticClass:\"post-card__contents\"},[_c('h3',{staticClass:\"text__title\"},[_vm._v(_vm._s(_vm.postData.postTitle))]),_c('div',{staticClass:\"text__contents\"},[_vm._v(_vm._s(_vm.postData.content))]),_vm._l((_vm.comments),function(data,index){return _c('div',{key:data.index,staticClass:\"text__comments\"},[_c('span',[_vm._v(\" \"+_vm._s(data.content))]),_c('span',[_vm._v(\" \"+_vm._s(data.userID))]),_c('button',{staticClass:\"btn_del-comment\",on:{\"click\":function($event){return _vm.deleteComment(index)}}},[_vm._v(\" 삭제 \")])])}),_c('button',{staticClass:\"btn-like\",attrs:{\"type\":\"button\",\"disabled\":this.likedValue == 1},on:{\"click\":_vm.likePost}},[_vm._v(\" 좋아요 \"+_vm._s(_vm.postData.likeNum)+\"  \"),_c('i',{class:['fa-heart', _vm.likedValue == 1 ? 'fas' : 'far']})]),_c('button',{staticClass:\"btn-report\",attrs:{\"type\":\"button\",\"disabled\":this.reportValue == 1},on:{\"click\":_vm.reportPost}},[_vm._v(\" 신고하기 \"+_vm._s(_vm.postData.reportCount)+\"  \")])],2),_c('div',{staticClass:\"comment-form\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.comment),expression:\"comment\"}],domProps:{\"value\":(_vm.comment)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.comment=$event.target.value}}}),_c('button',{attrs:{\"disabled\":!this.comment},on:{\"click\":_vm.createComment}},[_vm._v(\" 작성 \")])])])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import { instance } from \"./index\";\n\n// 댓글 생성\nfunction createComment(postData) {\n  return instance.post(\"comm/comment\", postData);\n}\n\n// 댓글 조회\nfunction fetchComments(postNum) {\n  return instance.get(`comm/comments/${postNum}`);\n}\n\n// 댓글 개별 조회\nfunction fetchComment(postNum) {\n  return instance.get(`comm/comment/${postNum}`);\n}\n\n// 댓글 개별 삭제\nfunction deleteComment(commentNum) {\n  return instance.delete(`comm/comment/${commentNum}`);\n}\n\nexport { createComment, fetchComment, fetchComments, deleteComment };\n","import { instance } from \"./index\";\n\n// 사용자의 신고 유무 리턴 기능\nfunction fetchReport(postNum, userID) {\n  return instance.get(`/report/check/${postNum}/${userID}`);\n}\n\n// 사용자의 신고 유무 리턴 기능\nfunction createReport(postNum, userID) {\n  return instance.post(`/report/report/${postNum}/${userID}`);\n}\n\nexport { fetchReport, createReport };\n","<!-- 게시글 상세 -->\n<template>\n  <div>\n    <div class=\"post-card__wrapper\">\n      <div class=\"post-card\">\n        <div class=\"post-card__img\">\n          <img :src=\"img\" alt=\"\" style=\"width: 100%\" />\n        </div>\n        <div>\n          <div class=\"post-card__follow\">\n            <div>\n              <span>{{ postData.writerID }}</span>\n              <button\n                v-if=\"this.$store.state.userID != this.postData.writerID\"\n                type=\"button\"\n                class=\"btn-like\"\n                @click=\"followUser\"\n              >\n                팔로우&nbsp;<i\n                  :class=\"['fa-heart', follow ? 'fas' : 'far']\"\n                ></i>\n              </button>\n              <div v-if=\"this.$store.state.userID == this.postData.writerID\">\n                <span class=\"myPost\"> [내가 쓴 글] </span>\n              </div>\n            </div>\n            <!-- 게시글 작성자일 경우에만 보여줌 -->\n            <div\n              v-if=\"this.$store.state.userID == this.postData.writerID\"\n              class=\"post-card__btns\"\n            >\n              <button @click=\"editPost\" class=\"btn__edit\">수정</button>\n              <button @click=\"deletePost\" class=\"btn__delete\">삭제</button>\n            </div>\n          </div>\n\n          <div class=\"post-card__contents\">\n            <h3 class=\"text__title\">{{ postData.postTitle }}</h3>\n\n            <div class=\"text__contents\">{{ postData.content }}</div>\n            <!-- 댓글 -->\n            <div\n              v-for=\"(data, index) in comments\"\n              :key=\"data.index\"\n              class=\"text__comments\"\n            >\n              <span> {{ data.content }}</span>\n              <span> {{ data.userID }}</span>\n\n              <button @click=\"deleteComment(index)\" class=\"btn_del-comment\">\n                삭제\n              </button>\n            </div>\n            <button\n              type=\"button\"\n              class=\"btn-like\"\n              :disabled=\"this.likedValue == 1\"\n              @click=\"likePost\"\n            >\n              좋아요&nbsp;{{ postData.likeNum }}&nbsp;\n              <i :class=\"['fa-heart', likedValue == 1 ? 'fas' : 'far']\"></i>\n            </button>\n            <button\n              type=\"button\"\n              class=\"btn-report\"\n              :disabled=\"this.reportValue == 1\"\n              @click=\"reportPost\"\n            >\n              신고하기&nbsp;{{ postData.reportCount }}&nbsp;\n            </button>\n          </div>\n          <div class=\"comment-form\">\n            <input v-model=\"comment\" /><button\n              :disabled=\"!this.comment\"\n              @click=\"createComment\"\n            >\n              작성\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { fetchPost, deletePost } from \"@/api/posts\";\nimport { createComment, fetchComments, deleteComment } from \"@/api/comment\";\nimport { createFollow, deleteFollow, getFollowee } from \"@/api/follow\";\nimport { fetchIfUserLiked, createLike } from \"@/api/like\";\nimport { fetchReport, createReport } from \"@/api/report\";\nimport axios from \"axios\";\n\nexport default {\n  async created() {\n    await this.fetchPost();\n    await this.getImg();\n    await this.fetchComments();\n    await this.fetchFollowee();\n    await this.checkFollow();\n    await this.fetchIfUserLiked();\n    await this.fetchReport();\n  },\n  mounted() {\n    console.log(\"id:\", this.$route.params.id);\n  },\n  data() {\n    return {\n      title: \"제목\",\n      contents: \"내용\",\n      comments: [],\n      comment: \"\",\n      commentNum: \"\",\n      postData: [],\n      postId: this.$route.params.id,\n      myID: {\n        id: this.$store.state.userID,\n      },\n      follow: false,\n      username: \"닉네임\",\n      writerID: \"\",\n      followeeList: [],\n      likedValue: 0,\n      reportValue: 0,\n      img: \"\",\n    };\n  },\n  computed: {},\n  methods: {\n    async checkFollow() {\n      try {\n        const writer = await this.writerID;\n        const followCheck = this.followeeList.some(function findFollowee(\n          element\n        ) {\n          if (element.followeeID == writer) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n        this.follow = followCheck;\n        console.log(\"내가 이미 글쓴이를 팔로우 중인지\", followCheck);\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    // 게시글 상세 조회\n    async fetchPost() {\n      try {\n        const { data } = await fetchPost(this.postId);\n        console.log(data);\n        this.postData = data;\n        this.writerID = data.writerID;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    // 사용자가 해당 게시글 좋아요 눌렀는지 카운트 값 리턴(눌렀으면 1)\n    async fetchIfUserLiked() {\n      try {\n        const { data } = await fetchIfUserLiked(\n          this.postId,\n          this.$store.state.userID\n        );\n        this.likedValue = data[0][\"count(*)\"];\n        console.log(\"좋아요 값 반환\", this.likedValue);\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    // 게시글 좋아요\n    async likePost() {\n      // console.log(\"좋아요\");\n      try {\n        if (this.likedValue == 0) {\n          // this.liked = !this.liked;\n          const { data } = await createLike(\n            this.postId,\n            this.$store.state.userID\n          );\n          console.log(\"좋아요 누름\", data);\n          this.postData.likeNum += 1;\n          // this.postData.likeNum -= 1;\n        } else {\n          return this.postId;\n          // this.postData.likeNum += 1;\n          // console.log(\"좋아요 취소\");\n        }\n      } catch (error) {\n        console.log(error);\n      } finally {\n        // this.fetchPost();\n      }\n    },\n    // 사용자가 해당 게시글 신고 눌렀는지 카운트 값 리턴(눌렀으면 1)\n    async fetchReport() {\n      try {\n        const { data } = await fetchReport(\n          this.postId,\n          this.$store.state.userID\n        );\n        this.reportValue = data[0][\"count(*)\"];\n        console.log(\"신고 값 반환\", this.reportValue);\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    // 게시글 신고\n    async reportPost() {\n      try {\n        if (this.reportValue == 0) {\n          const { data } = await createReport(\n            this.postId,\n            this.$store.state.userID\n          );\n\n          console.log(\"신고 누름\", data);\n          this.postData.reportCount += 1;\n        } else {\n          return this.postId;\n        }\n      } catch (error) {\n        console.log(error);\n      } finally {\n        // this.fetchPost();\n      }\n    },\n    // 나의 팔로위 목록 조회 -> 글 작성자를 이미 팔로우 중이면 true값 반환하여야 함\n    async fetchFollowee() {\n      try {\n        const { data } = await getFollowee(this.$store.state.userID);\n        this.followeeList = data;\n        // this.followeeList = this.followeeList.map((a) => a.followeeID);\n        console.log(\"나의 팔로위 목록 배열로 조회\", this.followeeList);\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    // 팔로우\n    async followUser() {\n      try {\n        const fwee = this.postData.writerID;\n        const fwer = this.$store.state.userID;\n        if (this.follow == false) {\n          const { data } = await createFollow(fwer, fwee);\n          this.follow = true;\n          console.log(\"팔로우\", data);\n          alert(\"작성자를 팔로우하였습니다.\");\n        } else {\n          await deleteFollow(fwer, fwee);\n          this.follow = false;\n          console.log(\"팔로우 취소\");\n          alert(\"작성자를 언팔로우하였습니다.\");\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    // 게시글 삭제\n    async deletePost() {\n      const result = confirm(\"정말 삭제하시겠습니까?\");\n      if (result == true) {\n        try {\n          const { data } = await deletePost(this.postId);\n          console.log(data);\n        } catch (error) {\n          console.log(error);\n        }\n      } else {\n        console.log(\"삭제 취소\");\n      }\n    },\n    // 게시글 수정 페이지로\n    async editPost() {\n      const id = this.postId;\n      this.$router.push({ path: `/postview/edit/${id}`, replace: true });\n    },\n    // 댓글 작성\n    async createComment() {\n      try {\n        const { data } = await createComment({\n          content: this.comment,\n          userID: this.$store.state.userID,\n          postNum: this.postId,\n        });\n        console.log(data);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        this.initForm();\n        this.fetchComments();\n      }\n    },\n    // 댓글 조회\n    async fetchComments() {\n      const { data } = await fetchComments(this.postId);\n      this.comments = data;\n      console.log(data);\n      console.log(\"댓글\", this.comments);\n    },\n    initForm() {\n      this.comment = \"\";\n    },\n\n    async deleteComment(index) {\n      if (this.comments[index].userID == this.$store.state.userID) {\n        const result = confirm(\"정말 삭제하시겠습니까?\");\n        if (result == true) {\n          try {\n            const { data } = await deleteComment(\n              this.comments[index].commentNum\n            );\n            console.log(data);\n            this.fetchComments();\n          } catch (error) {\n            console.log(error);\n          }\n        } else {\n          console.log(\"삭제 취소\");\n        }\n      } else {\n        return alert(\"본인이 작성한 댓글만 삭제할 수 있습니다\");\n      }\n    },\n    async getImg() {\n      const postID = parseInt(this.postId);\n      axios\n        .get(`${process.env.VUE_APP_API_URL}post/image/${postID}`)\n        .then((res) => {\n          // headers: {…} 로 들어감.ß\n          const imgUrl = res.data[0].file_src;\n          this.img = imgUrl;\n          console.log(\"이미지 조회\", res.data[0].file_src);\n        });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.post-card__wrapper {\n  width: 100%;\n}\n\n.post-card {\n  width: 100%;\n  display: flex;\n  gap: 30px;\n}\n\n.post-card__img {\n  width: 500px;\n  height: 500px;\n  background-color: #f9f9f9;\n  border: 1px solid rgb(226, 225, 225);\n  border-radius: 5px;\n  margin-top: 50px;\n}\n\n.post-card__contents {\n  width: 500px;\n  height: auto;\n  border: 1px solid rgb(226, 225, 225);\n  border-radius: 5px;\n  box-sizing: 10px;\n  padding: 20px;\n  margin-bottom: 10px;\n}\n\nh3 {\n  line-height: 50px;\n  border-bottom: 1px solid rgb(226, 225, 225);\n  width: 100%;\n}\n\n.text__contents {\n  /* border-bottom: 1px solid rgb(226, 225, 225); */\n  height: auto;\n  padding: 10px 0 100px 0;\n  font-size: 22px;\n}\n\n.text__comments {\n  border-top: 1px solid rgb(226, 225, 225);\n  height: auto;\n  padding: 5px 0;\n  font-size: 16px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.comment-form {\n  width: 500px;\n  height: 50px;\n  display: flex;\n  justify-content: space-between;\n}\n.comment-form > input {\n  width: 400px;\n  border: 1px solid rgb(226, 225, 225);\n  border-radius: 5px;\n  text-indent: 10px;\n}\n\n.comment-form > button {\n  width: 90px;\n  border-style: none;\n  border-radius: 5px;\n  background-color: rgb(255, 210, 98);\n}\n\n.btn-like {\n  border-style: none;\n  border-radius: 5px;\n  border: 1px solid rgb(180, 179, 179);\n  background-color: transparent;\n  margin: 10px 10px 10px 0;\n  padding: 3px 10px;\n}\n\n.btn-report {\n  border-style: none;\n  border-radius: 5px;\n  background-color: rgb(228, 61, 61);\n  margin: 10px 10px 10px 0;\n  padding: 3px 10px;\n  color: white;\n}\n\n.btn_del-comment {\n  border-style: none;\n  border-radius: 5px;\n  border: 1px solid rgb(180, 179, 179);\n  background-color: transparent;\n  margin: 0;\n  padding: 3px 3px;\n}\n\n.post-card__follow {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.post-card__follow > div > button {\n  margin-left: 10px;\n}\n\n.post-card__btns {\n  margin: 10px;\n}\n\n.post-card__btns > .btn__edit {\n  width: 90px;\n  border-style: none;\n  border-radius: 5px;\n  background-color: rgb(255, 210, 98);\n  padding: 5px 0;\n}\n\n.post-card__btns > .btn__delete {\n  width: 90px;\n  border-style: none;\n  border-radius: 5px;\n  background-color: rgb(190, 190, 190);\n  color: rgb(16, 16, 16);\n  padding: 5px 0;\n}\n\nbutton:disabled {\n  cursor: not-allowed;\n  pointer-events: all !important;\n}\n\n.btn-report:disabled {\n  background: rgba(194, 52, 81, 0.679);\n}\n\n.myPost {\n  color: rgb(255, 79, 79);\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./PostItem.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./PostItem.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./PostItem.vue?vue&type=template&id=07aee696&scoped=true&\"\nimport script from \"./PostItem.vue?vue&type=script&lang=js&\"\nexport * from \"./PostItem.vue?vue&type=script&lang=js&\"\nimport style0 from \"./PostItem.vue?vue&type=style&index=0&id=07aee696&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"07aee696\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div class=\"post-view\">\n    <PostItem></PostItem>\n  </div>\n</template>\n\n<script>\nimport PostItem from \"@/components/PostItem.vue\";\n\nexport default {\n  components: { PostItem },\n};\n</script>\n\n<style>\n.post-view {\n  width: 100%;\n  box-sizing: border-box;\n  padding: 210px 10%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 100px;\n  z-index: 1;\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./PostView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40[0].rules[0].use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./PostView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./PostView.vue?vue&type=template&id=1e966ce8&\"\nimport script from \"./PostView.vue?vue&type=script&lang=js&\"\nexport * from \"./PostView.vue?vue&type=script&lang=js&\"\nimport style0 from \"./PostView.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import { instance } from \"./index\";\n\n// 팔로우 생성\nfunction createFollow(fwer, fwee) {\n  return instance.post(`foll/create/${fwer}/${fwee}`);\n}\n\n// 팔로우 취소\nfunction deleteFollow(fwer, fwee) {\n  return instance.delete(`foll/delete/${fwer}/${fwee}`);\n}\n\n// 팔로우 전체 조회\nfunction getFollow() {\n  return instance.get(\"foll/follows\");\n}\n\n// 팔로워 아이디 조회\nfunction getFollower(userID) {\n  return instance.get(`foll/followers/${userID}`);\n}\n\n// 팔로위 아이디 조회\nfunction getFollowee(userID) {\n  return instance.get(`foll/followees/${userID}`);\n}\n\nexport { createFollow, deleteFollow, getFollow, getFollower, getFollowee };\n","import { instance } from \"./index\";\n\n// 사용자가 좋아요 누른 게시글을 보여줌(마이 페이지)\nfunction fetchLikedPost(userID) {\n  return instance.get(`like/likedPosts/${userID}`);\n}\n\n// 사용자가 좋아요를 눌렀는지 카운트 값 리턴(눌렀으면 1)\nfunction fetchIfUserLiked(postNum, userID) {\n  return instance.get(`like/liked/${postNum}/${userID}`);\n}\n\n// 사용자가 좋아요 누르지 않은 게시글에 한해 좋아요 기능\nfunction createLike(postNum, userID) {\n  return instance.post(`like/like/${postNum}/${userID}`);\n}\n\nexport { fetchLikedPost, fetchIfUserLiked, createLike };\n","import { instance, files } from \"./index\";\n\n// 게시글 목록 조회\nfunction fetchPosts() {\n  return instance.get(\"post/posts\");\n}\n\n// 특정 게시글을 조회하는 API\nfunction fetchPost(postData) {\n  return instance.get(`post/posts/${postData}`);\n}\n\n// 게시글 생성\nfunction createPost(postData) {\n  return instance.post(\"post/posts\", postData);\n}\n\n// 게시글 삭제\nfunction deletePost(postNum) {\n  return instance.delete(`post/posts/${postNum}`);\n}\n\n// 게시글 수정\nfunction editPost(postNum, postData) {\n  return instance.put(`post/posts/${postNum}`, postData);\n}\n\n// 사진 첨부\nfunction uploadImg() {\n  return files.post(\"post/upload\");\n}\n\n// 카테고리에 해당하는 게시글 조회\nfunction fetchPostByCat(cateNum) {\n  return instance.get(`/post/postsByCat/${cateNum}`);\n}\n\nexport {\n  fetchPosts,\n  createPost,\n  deletePost,\n  fetchPost,\n  editPost,\n  uploadImg,\n  fetchPostByCat,\n};\n"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","staticRenderFns","staticStyle","attrs","img","_v","_s","postData","writerID","$store","state","userID","on","followUser","class","follow","_e","editPost","deletePost","postTitle","content","_l","data","index","key","$event","deleteComment","likedValue","likePost","likeNum","reportValue","reportPost","reportCount","directives","name","rawName","value","expression","domProps","target","composing","comment","createComment","instance","fetchComments","postNum","commentNum","fetchReport","createReport","mounted","console","title","contents","comments","postId","myID","id","username","followeeList","computed","methods","element","alert","path","replace","initForm","axios","then","res","component","components","PostItem","createFollow","fwer","fwee","deleteFollow","getFollower","getFollowee","fetchLikedPost","fetchIfUserLiked","createLike","fetchPost","createPost","fetchPostByCat","cateNum"],"sourceRoot":""}